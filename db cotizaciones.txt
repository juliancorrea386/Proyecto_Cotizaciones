CREATE DATABASE IF NOT EXISTS cotizaciones;
USE cotizaciones;

CREATE TABLE IF NOT EXISTS clientes (
  id VARCHAR(30) NOT NULL,        -- cédula
  nombre VARCHAR(150) NOT NULL,
  telefono VARCHAR(50),
  municipio VARCHAR(100),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
);

CREATE TABLE productos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    precio_costo DECIMAL(10,2) NOT NULL,
    precio_venta DECIMAL(10,2) NOT NULL,
    iva ENUM('0%', '5%', '19%') NOT NULL,
    embalaje ENUM('Frasco', 'Galón', 'Bolsa') NOT NULL,
    stock INT NOT NULL
);
CREATE TABLE IF NOT EXISTS usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin','user') DEFAULT 'user'
);

const bcrypt = require("bcrypt");
const db = require("./db");

(async () => {
    const hashedPassword = await bcrypt.hash("123456", 10);
    db.query(
        "INSERT INTO usuarios (username, password, role) VALUES (?, ?, ?)",
        ["admin", hashedPassword, "admin"],
        (err) => {
            if (err) console.error(err);
            else console.log("Usuario creado");
            process.exit();
        }
    );
})();


CREATE TABLE cotizaciones (
    id INT PRIMARY KEY AUTO_INCREMENT,
    numero_cotizacion VARCHAR(20) NOT NULL,
    fecha DATE NOT NULL,
    cliente_id VARCHAR(30) NOT NULL,
    tipo ENUM('credito', 'contado') NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES clientes(id)
);

-- Tabla de detalles de cotizaciones
CREATE TABLE cotizacion_detalles (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cotizacion_id INT NOT NULL,
    producto_id INT NOT NULL,
    cantidad INT NOT NULL,
    precio_venta DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (cotizacion_id) REFERENCES cotizaciones(id),
    FOREIGN KEY (producto_id) REFERENCES productos(id)
);

ALTER TABLE cotizaciones
ADD COLUMN tipo_pago ENUM('contado','credito') DEFAULT 'contado',
ADD COLUMN total DECIMAL(10,2) NOT NULL DEFAULT 0,
ADD COLUMN saldo DECIMAL(10,2) NOT NULL DEFAULT 0;

CREATE TABLE recibos (
  id INT AUTO_INCREMENT PRIMARY KEY,
  fecha DATE NOT NULL,
  observacion TEXT
);
CREATE TABLE recibo_detalles (
  id INT AUTO_INCREMENT PRIMARY KEY,
  recibo_id INT NOT NULL,
  cotizacion_id INT NOT NULL,
  valor DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (recibo_id) REFERENCES recibos(id),
  FOREIGN KEY (cotizacion_id) REFERENCES cotizaciones(id)
);

ALTER TABLE recibos 
ADD COLUMN numero_recibo VARCHAR(50) NOT NULL;

ALTER TABLE recibos
ADD COLUMN cliente_id VARCHAR(20) NOT NULL AFTER id;

ALTER TABLE productos
ADD COLUMN Referencia INT;

ALTER TABLE productos
MODIFY COLUMN embalaje VARCHAR(20);

CREATE TABLE municipios (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL UNIQUE
);

INSERT INTO municipios (nombre) VALUES
('Florencia'),
('Morelia'),
('Belén'),
('San José'),
('Yurayaco'),
('La Montañita'),
('Paujil'),
('Puerto Rico'),
('San Vicente del Caguán'),
('Cartagena del Chairá'),
('El Doncello');

ALTER TABLE clientes ADD municipio_id INT;

ALTER TABLE clientes
ADD CONSTRAINT fk_municipio_cliente
FOREIGN KEY (municipio_id) REFERENCES municipios(id);

UPDATE clientes c
JOIN municipios m ON c.municipio = m.nombre
SET c.municipio_id = m.id;

ALTER TABLE clientes DROP COLUMN municipio;


SELECT r.id, r.numero_recibo, r.fecha, r.observacion,
       r.cliente_id,
       cl.nombre AS cliente_nombre, c.subtotal,
       COALESCE(SUM(rd.valor), 0) AS total_abonos
FROM recibos r
LEFT JOIN recibo_detalles rd ON r.id = rd.recibo_id
LEFT JOIN cotizaciones c ON rd.cotizacion_id = c.id
LEFT JOIN clientes cl ON r.cliente_id = cl.id
WHERE 1=1
GROUP BY r.id, r.numero_recibo, r.fecha, r.observacion, r.cliente_id, cl.nombre, c.subtotal;

UPDATE cotizaciones
SET saldo = 195000
WHERE id=2;

SELECT 
    id,
    numero_cotizacion,
    cliente_id,
    subtotal,
    (subtotal - saldo) AS abonado,   -- lo pagado hasta ahora
    saldo,
    CASE
        WHEN saldo = 0 THEN 'Pagada'
        WHEN saldo = subtotal THEN 'Pendiente'
        ELSE 'Abonada'
    END AS estado
FROM cotizaciones;
